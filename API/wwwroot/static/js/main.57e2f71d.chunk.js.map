{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/commentStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/homePage.tsx","app/form/MyTextArea.tsx","app/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSiderbar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/NotFound.tsx","features/errors/ServerErrors.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgerCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","features/profiles/AllProfiles.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","JSON","parse","error","status","f","toast","method","errors","hasOwnProperty","history","push","stateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","getAll","params","details","id","create","activity","update","attend","Account","current","login","user","register","refreshToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","a","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activityByDate","reduce","activities","format","CommentStore","comments","hubConnection","createHubConnection","activityId","activityStore","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","stopHubConnection","stop","clearComments","addComment","invoke","CommonStore","window","localStorage","getItem","appLoaded","setToken","setAppLoaded","setItem","removeItem","ModalStore","modal","open","openModal","content","closeModal","ProfileStore","profile","loadingProfile","uploading","followings","users","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","loadUsers","photo","photos","isMain","setImage","p","followingCount","loadFollowings","loadUserActivities","UserStore","refreshTokenTimeOut","creds","startRefreshTokenTimer","modalStore","getUser","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","profileStore","commentStore","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","MenuItem","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","e","preventDefault","handleFollow","Card","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","PopupContent","ActivityListItem","Segment","Group","Label","textAlign","Description","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadNext","setLoadNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","basic","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","marginBottom","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","resetForm","onKeyPress","shiftKey","activityImageStyle","padding","zIndex","left","top","ribbon","disable","verticalAlign","length","relaxed","divided","Extra","NotFound","Inline","primary","message","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgerCropper","imagePreview","setCropper","height","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","widths","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","panels","menuPosition","StatisticGroup","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","AllProfiles","ServerErrors","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","createRoot","document","getElementById","Provider"],"mappings":"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","file":"static/js/main.57e2f71d.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../..\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { PaginatedResult } from \"../models/pagination\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"../stores/store\";\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers!.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    \n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>;\n    }\n    return response;\n\n}, (error: AxiosError) => {\n    const {data, status, config, headers} = error.response!;\n    const f = data as any; // took some time to get rid of error 'data is type unknown'\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if(config.method === 'get' && f.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (f.errors){\n                const stateErrors = [];\n                for (const key in f.errors) {\n                    if (f.errors[key]) {\n                        stateErrors.push(f.errors[key])\n                    }\n                }\n                throw stateErrors.flat();\n            }\n            break;\n        case 401:\n            if (status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')) {\n                store.userStore.logout();\n                toast.error('Session expired - please login again');\n            }\n            break;\n        case 404:\n            history.push('/not-found')\n            break;\n        case 500:\n            store.commonStore.setServerError(f);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    getAll: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities/', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n    refreshToken: () => requests.post<User>('/account/refreshToken', {})\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    getAll: () => requests.get<Profile[]>('/profiles'),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id:string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>\n        (`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>\n        (`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[]\n}\n\nexport class Activity implements Activity {\n    constructor(init? : ActivityFormValues) {\n        Object.assign(this, init);\n    }\n}\n\nexport class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues) {\n        if (activity) {\n            this.id = activity.id;\n            this.title = activity.title;\n            this.category = activity.category;\n            this.description = activity.description;\n            this.date = activity.date;\n            this.venue = activity.venue;\n            this.city = activity.city;\n        }\n    }\n}","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { format } from \"date-fns\";\nimport { makeAutoObservable, reaction, runInAction} from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\nimport { Profile } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor(){\n        makeAutoObservable(this)\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate : string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activityByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activityByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            const result = await agent.Activities.getAll(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error)\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id:string) => {\n        let activity = this.getActivity(id);\n        if(activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if(user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            );\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id:string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if(this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees =\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n    \n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing connection', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt);\n                    })\n                    this.comments = comments   \n            });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() =>{ \n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.push(comment)});\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n            \n        }\n    }\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n\n    constructor () {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error : ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean,\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    users: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 2 || activeTab === 3) {\n                    const predicate = activeTab === 2 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser(){\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    loadUsers = async () => {\n        this.loadingProfile = true;\n        try {\n            const users = await agent.Profiles.getAll();\n            runInAction(() => {\n                this.users = users;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if( this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingActivities = false);\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n    refreshTokenTimeOut: any;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn(){\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            this.startRefreshTokenTimer(user);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            this.startRefreshTokenTimer(user);\n        } catch (error) {\n            console.log(error);\n            \n        }\n    }\n\n    register = async(creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            this.startRefreshTokenTimer(user);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if(this.user) {\n            this.user.image = image;\n        }\n    }\n\n    refreshToken = async () => {\n        this.stopRefreshTokenTimer();\n        try {\n            const user = await agent.Account.refreshToken();\n            runInAction(() => this.user = user);\n            store.commonStore.setToken(user.token);\n            this.startRefreshTokenTimer(user);\n        } catch (error) {\n            console.log(error);\n            \n        }\n    }\n\n    private startRefreshTokenTimer(user: User) {\n        const jwtToken = JSON.parse(window.atob(user.token.split('.')[1]));\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\n        this.refreshTokenTimeOut = setTimeout(this.refreshToken, timeout);\n    }\n\n    private stopRefreshTokenTimer() {\n        clearTimeout(this.refreshTokenTimeOut);\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore(){\n    return useContext(StoreContext);\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { Button, Container, Dropdown, Image, Menu, MenuItem } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/store\";\n\n\nexport default observer(function NavBar(){\n    const {userStore: {user, logout}} = useStore();\n\n    return(\n        <Menu inverted fixed=\"top\">\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\n                    SmallSociety\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\n                <Menu.Item as={NavLink} to='/profiles' name=\"Users\" /> \n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\" />\n                </Menu.Item>\n                <MenuItem position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </MenuItem>\n            </Container>\n        </Menu>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Calendar from \"react-calendar\";\nimport { Header, Menu } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\n\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item content='All Activities' active={predicate.has('all')} onClick={() => setPredicate('all', 'true')} />\n                <Menu.Item content='I am going' active={predicate.has('isGoing')} onClick={() => setPredicate('isGoing', 'true')} />\n                <Menu.Item content='I am hosting' active={predicate.has('isHost')} onClick={() => setPredicate('isHost', 'true')} />\n            </Menu>\n            <Header />\n            <Calendar onChange={(date: Date) => setPredicate('startDate', date as Date)} value={predicate.get('startDate') || new Date()} />\n        </>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React, { SyntheticEvent } from \"react\";\nimport { Button, Reveal } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const { profileStore, userStore } = useStore();\n    const { updateFollowing, loading } = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    color='teal'\n                    content={profile.following ? 'Following' : 'Not following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Image, List, Popup, PopupContent } from \"semantic-ui-react\";\nimport { Profile } from \"../../../app/models/profile\";\nimport ProfileCard from \"../../profiles/ProfileCard\";\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 4\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                 hoverable\n                 key={attendee.username}\n                 trigger={\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                        <Image\n                         size='mini'\n                         circular src={attendee.image || '/assets/user.png'} \n                         style={attendee.following ? styles : null} \n                        />\n                     </List.Item>\n                 }\n                 >\n                    <PopupContent>\n                        <ProfileCard profile={attendee} />\n                    </PopupContent>\n                </Popup>\n            ))}\n        </List >\n    )\n})","import { format } from \"date-fns\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\nimport { Activity } from \"../../../app/models/activity\";\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link> </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description  color='orange'>\n                                    <Label>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description  color='green'>\n                                    <Label>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button as={Link} to={`/activities/${activity.id}`} color='teal' floated='right' content='View' />\n            </Segment>\n        </Segment.Group>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport { Fragment } from \"react\";\nimport { Header } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityListItem from \"./ActivityListItem\";\n\n\nexport default observer(function ActivityList() {\n\n    const { activityStore } = useStore();\n    const { groupedActivities } = activityStore;\n\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {activities.map(activity => (\n                        <ActivityListItem key={activity.id} activity={activity} />\n                    ))}\n                </Fragment>\n            ))}\n        </>\n\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\nexport default observer(function ActivityDashboard() {\n    const { activityStore } = useStore();\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\n    const [loadNext, setLoadNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivities().then(() => setLoadNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                    >\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadNext} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    type?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n\n    return (\n                                           // cast to boolean\n        <Form.Field error={meta.touched && !!meta.error}>  \n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color=\"red\">{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Label } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values)\n                .catch(error => setErrors({error: 'Invalid email or password'}))}>\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() =>\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props ) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n                \n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\nimport ValidationErrors from \"../errors/ValidationErrors\";\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values)\n                .catch(error => setErrors({error}))}\n                validationSchema={Yup.object({\n                    displayName: Yup.string().required(),\n                    username: Yup.string().required(),\n                    email: Yup.string().required().email(),\n                    password: Yup.string().required(),\n                })}\n                >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete='off'>\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() =>\n                        <ValidationErrors errors={errors.error} />}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Header, Segment, Image, Button } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport LoginForm from \"../users/LoginForm\";\nimport RegisterForm from \"../users/RegisterForm\";\n\nexport default observer(function HomePage() {\n    const {userStore, modalStore } = useStore();\n    return(\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\n                    SmallSociety\n                </Header>\n                {userStore.isLoggedIn\n                  ? (\n                    <>\n                    <Header as='h2' inverted content='Welcome to SmallSociety!' />\n                    <Button as={Link} to='/activities' size='huge' inverted>\n                        Go to activities\n                    </Button>\n                    </>\n                ) : (\n                    <>\n                    <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                        login\n                    </Button>\n                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                        Register\n                    </Button>\n                    </>\n                )}\n                \n                \n            </Container>\n        </Segment>\n    )\n})","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    rows: number;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n\n    return (\n                                           // cast to boolean\n        <Form.Field error={meta.touched && !!meta.error}>  \n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color=\"red\">{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label, Select } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    options: any;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n\n    return (\n                                           // cast to boolean\n        <Form.Field error={meta.touched && !!meta.error}>  \n            <label>{props.label}</label>\n            <Select\n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color=\"red\">{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n    {text: 'Sport', value: 'sports'}\n]","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n\n    return (\n                                           // cast to boolean\n        <Form.Field error={meta.touched && !!meta.error}>  \n            <DatePicker\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color=\"red\">{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from \"formik\";\nimport * as Yup from 'yup';\nimport MyTextInput from \"../../../app/form/MyTextInput\";\nimport MyTextArea from \"../../../app/form/MyTextArea\";\nimport MySelectInput from \"../../../app/form/MySelectInput\";\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\nimport MyDateInput from \"../../../app/form/MyDateInput\";\nimport { ActivityFormValues } from \"../../../app/models/activity\";\n  \n\nexport default observer(function ActivityForm() {\n    const history = useHistory();\n    const { activityStore } = useStore();\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\n    }, [id, loadActivity])\n\n     function handleFormSubmit(activity: ActivityFormValues) {\n         if (!activity.id) {\n             let newActivity = {\n                 ...activity,\n                 id: uuid()\n             };\n             createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n         } else {\n             updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n         }\n     }\n\n    if (loadingInitial) return (<p className='text-center'>Loading activity form</p>)\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize\n                initialValues={activity}\n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name=\"title\" placeholder=\"Title\" />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput\n                            placeholderText='Date'\n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                          />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button\n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting}\n                            floated='right' positive type='submit'\n                            content='Submit' />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n\n        </Segment>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik';\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n\n                    <Formik onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\n                        initialValues={{ body: '' }}\n                        validationSchema={Yup.object({\n                            body: Yup.string().required()\n                        })}\n                    >\n                        {({ isSubmitting, isValid, handleSubmit }) => (\n                            <Form className='ui form'>\n                                <Field name='body'>\n                                    {(props: FieldProps) => (\n                                        <div style={{position: 'relative'}}>\n                                            <Loader active={isSubmitting} />\n                                            <textarea\n                                                placeholder='Enter your comment'\n                                                rows={2}\n                                                {...props.field}\n                                                onKeyPress={e => {\n                                                    if (e.key === 'Enter' && e.shiftKey) {\n                                                        return;\n                                                    }\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\n                                                        e.preventDefault();\n                                                        isValid && handleSubmit();\n                                                    }\n                                                }} \n                                            />\n                                        </div>\n                                    )}\n                                </Field>\n                            </Form>\n                        )}\n                    </Formik>\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                {activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\n                <Segment basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{ color: 'Black' }}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button\n                            disabled={activity.isCancelled}\n                            as={Link}\n                            to={`/manage/${activity.id}`}\n                            color='orange'\n                            floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button disable={activity.isCancelled}\n                        loading={loading} onClick={updateAttendance}\n                        color='teal'>Join Activity\n                    </Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar({ activity: {attendees, host} }: Props) {\n    if(!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>                    \n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n                            <Label\n                                style={{ position: 'absolute' }}\n                                color='orange'\n                                ribbon='right'\n                            >\n                                Host\n                            </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\nimport ActivityDetailedSidebar from \"./ActivityDetailedSiderbar\";\n\n\nexport default observer(function ActivityDetails() {\n\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if(id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity])\n\n    if(loadingInitial || !activity) return ( <p className='text-center'>Loading activity details</p>);\n\n    return (\n       <Grid>\n           <Grid.Column width={10}>\n               <ActivityDetailedHeader activity={activity} />\n               <ActivityDetailedInfo activity={activity} />\n               <ActivityDetailedChat activityId={activity.id} />\n           </Grid.Column>\n           <Grid.Column width={6}>\n               <ActivityDetailedSidebar activity={activity}/>\n           </Grid.Column>\n       </Grid>\n    )\n})","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Header, Segment, Icon, Button } from \"semantic-ui-react\";\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                    Could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Container, Header, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header as='h5' color=\"red\" content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color=\"teal\" />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/store\";\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import React, { SyntheticEvent, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { UserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { useStore } from \"../../app/stores/store\";\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'future' } },\n    { menuItem: 'Past Events', pane: { key: 'past' } },\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\n];\n\nexport default observer(function ProfileActivities() {\n    const { profileStore } = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar'\n                        content={'Activities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>\n                                        {activity.title}\n                                    </Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>\n                                            {format(new Date(activity.date), 'do LLL')}\n                                        </div>\n                                        <div>\n                                            {format(new Date(activity.date), 'h:mm a')}\n                                        </div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n});","import { observer } from \"mobx-react-lite\";\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileCard from \"./ProfileCard\";\n\nexport default observer(function ProfileFollowings() {\n    const { profileStore } = useStore();\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header\n                        floated='left'\n                        icon='user'\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from \"react\";\nimport {Cropper} from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgerCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper\n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react';\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n  const onDrop = useCallback((acceptedFiles: any) => {\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n    })))\n    \n  }, [setFiles])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n      <input {...getInputProps()} />\n      <Icon name='upload' size='huge' />\n      <Header content='Drop image here' />\n    </div>\n  )\n}","import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Header } from \"semantic-ui-react\";\nimport PhotoWidgerCropper from \"./PhotoWidgerCropper\";\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgerCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                    <>\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                        <Button.Group widths={2}>\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                        </Button.Group>\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React, { SyntheticEvent, useState } from \"react\";\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\nimport { Photo, Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfilePhotos({ profile }: Props) {\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                        <Card.Group itemsPerRow={5}>\n                            {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser && (\n                                        <Button.Group fluid widths={2}>\n                                            <Button\n                                                basic\n                                                color='green'\n                                                content='Main'\n                                                name={'main' + photo.id}\n                                                disabled={photo.isMain}\n                                                loading={target === 'main' + photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo, e)}\n                                            />\n                                            <Button\n                                                basic color='red'\n                                                icon='trash'\n                                                loading={target === photo.id && loading}\n                                                onClick={e => handleDeletePhoto(photo, e)}\n                                                disabled={photo.isMain}\n                                                name={photo.id}\n                                            />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                        </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Tab } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileActivities from \"./ProfileActivities\";\nimport ProfileFollowings from \"./ProfileFollowings\";\nimport ProfilePhotos from \"./ProfilePhotos\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n\n    const {profileStore} = useStore();\n\n    const panels = [\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: 'Events', render: () => <ProfileActivities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\n    ];\n\n    return (\n        <Tab\n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panels}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport {  Divider, Grid, Header, Item, Segment, Statistic, StatisticGroup } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({profile}: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <StatisticGroup widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </StatisticGroup>\n                    <Divider />\n                   <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileContent from \"./ProfileContent\";\nimport ProfileHeader from \"./ProfileHeader\";\n\nexport default observer(function ProfilePage() {\n    const { username } = useParams<{ username: string }>();\n    const { profileStore } = useStore();\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <h3>Loading profile...</h3>\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>}\n\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to ='/'/>}\n        />\n    )\n}","import { observer } from \"mobx-react-lite\"\nimport { useEffect } from \"react\"\nimport { Card, Grid} from \"semantic-ui-react\"\nimport { useStore } from \"../../app/stores/store\"\nimport ProfileCard from \"./ProfileCard\"\n\n\nexport default observer(function AllProfiles() {\n    const { profileStore } = useStore();\n    const { loadUsers, loadingProfile, users } = profileStore;\n\n    useEffect(() => {\n        loadUsers();\n    }, [loadUsers])\n\n    if (loadingProfile) return <h3>Loading users...</h3>\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {users.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n        </Grid>\n    )\n})","import React, { useEffect } from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/homePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerErrors from '../../features/errors/ServerErrors';\nimport { useStore } from '../stores/store';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\nimport AllProfiles from '../../features/profiles/AllProfiles';\n\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <h2>Loading app...</h2>\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '5em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/profiles' component={AllProfiles} /> \n                <Route path='/server-error' component={ServerErrors} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ScrollToTop(){\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n      window.scrollTo(0, 0);\n    }, [pathname]);\n  \n    return null;\n  }\n  \n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}